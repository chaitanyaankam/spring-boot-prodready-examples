-- GENRE SCHEMA
DROP TABLE IF EXISTS GENRE;
DROP SEQUENCE IF EXISTS GENRE_SEQ;
CREATE SEQUENCE GENRE_SEQ 
START WITH 1
INCREMENT BY 1;
CREATE TABLE GENRE(
ID BIGINT DEFAULT GENRE_SEQ.nextval PRIMARY KEY,
NAME VARCHAR(255));

-- AUTHOR SCHEMA
DROP TABLE IF EXISTS AUTHOR;
DROP SEQUENCE IF EXISTS AUTHOR_SEQ;
CREATE SEQUENCE AUTHOR_SEQ 
START WITH 1
INCREMENT BY 1;
CREATE TABLE AUTHOR(
AUTHOR_ID BIGINT DEFAULT AUTHOR_SEQ.nextval PRIMARY KEY,
NAME VARCHAR(255) NOT NULL,
NATIONALITY VARCHAR(200) NOT NULL);

-- PUBLISHER SCHEMA
DROP TABLE IF EXISTS PUBLISHER;
DROP SEQUENCE IF EXISTS PUBLISHER_SEQ;
CREATE SEQUENCE PUBLISHER_SEQ 
START WITH 1
INCREMENT BY 1;
CREATE TABLE PUBLISHER(
PUBLISHER_ID BIGINT DEFAULT PUBLISHER_SEQ.nextval PRIMARY KEY,
NAME VARCHAR(255) NOT NULL,
COUNTRY VARCHAR(255) NOT NULL);

-- BOOK SCHEMA
--CREATE USER BOOKA PASSWORD 'Booka@123';
--GRANT ALTER ANY SCHEMA TO BOOKA;
DROP TABLE IF EXISTS BOOKS;
DROP SEQUENCE IF EXISTS BOOK_SEQ;
CREATE SEQUENCE BOOK_SEQ 
START WITH 1
INCREMENT BY 1;

CREATE TABLE BOOKS(
ID BIGINT DEFAULT BOOK_SEQ.nextval PRIMARY KEY,
NAME VARCHAR(255),
AUTHOR_ID BIGINT,
GENRE_ID BIGINT,
PUBLISHED_DATE DATE,
PUBLISHER_ID BIGINT,
LANGUAGE VARCHAR(250),
COST INT NOT NULL,
CURRENCY VARCHAR(10) NOT NULL,
FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID),
FOREIGN KEY (GENRE_ID) REFERENCES GENRE(ID),
FOREIGN KEY (PUBLISHER_ID) REFERENCES PUBLISHER(PUBLISHER_ID));

-- ENTITY SCHEMA
DROP TABLE IF EXISTS ENTITY;
DROP SEQUENCE IF EXISTS ENTITY_SEQ;
CREATE SEQUENCE ENTITY_SEQ 
START WITH 1
INCREMENT BY 1;
CREATE TABLE ENTITY(
ENTITY_ID BIGINT DEFAULT ENTITY_SEQ.nextval PRIMARY KEY,
NAME VARCHAR(255));

-- ENTITY_VIEW SCHEMA
DROP TABLE IF EXISTS ENTITY_VIEW;
DROP SEQUENCE IF EXISTS ENTITY_VIEW_SEQ;
CREATE SEQUENCE ENTITY_VIEW_SEQ 
START WITH 1
INCREMENT BY 1;
CREATE TABLE ENTITY_VIEW(
ENTITY_VIEW_ID BIGINT DEFAULT ENTITY_VIEW_SEQ.nextval PRIMARY KEY,
ENTITY_ID BIGINT,
ATTRIBUTE VARCHAR(25),
ATTrIBUTE_LABEL VARCHAR(25),
INPUT_TYPE VARCHAR(25),
IS_ENTITY BOOLEAN,
COMPOSED_ENTITY VARCHAR(25),
FOREIGN KEY (ENTITY_ID) REFERENCES ENTITY(ENTITY_ID));
