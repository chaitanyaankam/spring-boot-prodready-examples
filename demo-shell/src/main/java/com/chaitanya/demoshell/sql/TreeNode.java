package com.chaitanya.demoshell.sql;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import com.chaitanya.demoshell.model.Entity;

import lombok.Data;

@Data
public class TreeNode<T> {

    private T data;
    
    private TreeNode<T> parent;
    
    List<TreeNode<T>> children;

    public TreeNode(T data) {
        this.data = data;
        this.children = new LinkedList<TreeNode<T>>();
    }

    public TreeNode<T> addChild(T child) {
        TreeNode<T> childNode = new TreeNode<T>(child);
        childNode.parent = this;
        this.children.add(childNode);
        return childNode;
    }

	public static String renderDirectoryTree(TreeNode<Entity> tree) {
	    List<StringBuilder> lines = renderDirectoryTreeLines(tree);
	    String newline = System.getProperty("line.separator");
	    StringBuilder sb = new StringBuilder(lines.size() * 20);
	    for (StringBuilder line : lines) {
	        sb.append(line);
	        sb.append(newline);
	    }
	    return sb.toString();
	}

	public static List<StringBuilder> renderDirectoryTreeLines(TreeNode<Entity> tree) {
	    List<StringBuilder> result = new LinkedList<>();
	    result.add(new StringBuilder().append(tree.getData().treeTitle()));
	    Iterator<TreeNode<Entity>> iterator = tree.getChildren().iterator();
	    while (iterator.hasNext()) {
	        List<StringBuilder> subtree = renderDirectoryTreeLines(iterator.next());
	        if (iterator.hasNext()) {
	            addSubtree(result, subtree);
	        } else {
	            addLastSubtree(result, subtree);
	        }
	    }
	    return result;
	}

	private static void addSubtree(List<StringBuilder> result, List<StringBuilder> subtree) {
	    Iterator<StringBuilder> iterator = subtree.iterator();
	    //subtree generated by renderDirectoryTreeLines has at least one line which is tree.getData()
	    result.add(iterator.next().insert(0, "├── "));
	    while (iterator.hasNext()) {
	        result.add(iterator.next().insert(0, "│   "));
	    }
	}
	
	private static void addLastSubtree(List<StringBuilder> result, List<StringBuilder> subtree) {
	    Iterator<StringBuilder> iterator = subtree.iterator();
	    //subtree generated by renderDirectoryTreeLines has at least one line which is tree.getData()
	    result.add(iterator.next().insert(0, "└── "));
	    while (iterator.hasNext()) {
	        result.add(iterator.next().insert(0, "    "));
	    }
	}

}